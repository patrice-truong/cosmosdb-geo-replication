import {
  CallToolRequestSchema,
  ListToolsRequestSchema
} from '@modelcontextprotocol/sdk/types.js'
import { Container, SqlQuerySpec } from '@azure/cosmos'

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { SSEServerTransport } from "@modelcontextprotocol/sdk/server/sse.js";

const sourceFile = 'src/mcp-server.ts'

const GET_PRODUCTS_TOOL = {
  name: 'get_item',
  description:
    "Retrieves products from the 'products' Azure Cosmos DB container",
  inputSchema: {
    type: 'object',
    properties: {
      containerName: { type: 'string', description: 'Name of the container' }
    },
    required: ['containerName']
  }
}

export const getProducts = async (container: Container) => {
  const startTime = Date.now()
  try {
    const query = `SELECT c.id, c.type, c.brand, c.name, c.description, c.price FROM c`
    const sqlQuerySpec: SqlQuerySpec = {
      query: query
    }
    const { resources: items } = await container.items
      .query(sqlQuerySpec)
      .fetchAll()

    const duration = Date.now() - startTime
    console.debug(`[${sourceFile}::getProducts] ${duration} ms`)

    return {
      data: items,
      statusCode: 200,
      duration: duration
    }
  } catch (error) {
    console.timeEnd('getProducts')
    return {
      error: 'Error fetching products from Cosmos DB: ' + error,
      statusCode: 500
    }
  }
}

export const initializeMCPServer = (container: Container) => {
  const server = new McpServer(
    {
      name: 'cosmosdb-mcp-server',
      version: '0.0.0'
    },
    {
      capabilities: {
        tools: {}
      }
    }
  )

  const httpServer = createServer()

  server.setRequestHandler(ListToolsRequestSchema, async () => ({
    tools: [GET_PRODUCTS_TOOL]
  }))

  server.setRequestHandler(CallToolRequestSchema, async( request )=> {
    const { name, arguments: args } = request.params
    try {
      let result
      switch (name) {
        case 'getProducts':
          result = await getProducts(container)
          break
        default:
          return {
            content: [{ type: 'text', text: `Unknown tool: ${name}` }],
            isError: true
          }
      }
      return {
        content: [{ type: 'text', text: JSON.stringify(result, null, 2) }]
      }
    } catch (error) {
      return {
        content: [{ type: 'text', text: `Error occurred: ${error}` }],
        isError: true
      }
    }
  })

  return server
}

export const runServer = async(server: McpServer, res: Response) => {
    const transport = new SSEServerTransport('/messages', );
    await server.connect(transport);    
    console.debug(`[${sourceFile}::runServer] mcp-server running on stdio.`)
}
